pipeline {
    agent any
    
    tools {
        nodejs 'NodeJS22'
    }
    
    environment { 
        registryCredential = 'harsha3330-dockerhub'
        buildTimestamp = new java.text.SimpleDateFormat('yyyyMMdd-HHmmss').format(new java.util.Date())
        dockerImage = "harsha3330/mocktest-frontend:${env.FrontendBranch}-${env.BUILD_NUMBER}-date-${buildTimestamp}"
        SONARQUBE_ENV = 'SonarQube'
    }
    
    stages {

        stage('Cleaning Workspace') {
            steps {
                cleanWs()
            }
        }
        
        
        stage("Front-end Clone") {
            steps {
                script {
                    sh "git clone https://github.com/Harsha190202/mocktest-frontend.git -b ${env.FrontendBranch}"
                }
            }
        }

        stage("Front-end Dependencies") {
            steps {
                dir("./mocktest-frontend/") {
                    script {
                        sh "npm cache clean --force"
                        sh "npm install"
                    }
                }
            }
        }
        
        stage("Front-end Build") {
            steps {
                dir("./mocktest-frontend/") {
                    script {
                        sh "npm run build"
                    }
                }
            }
        }


        stage('SonarQube Analysis') {
            steps {
                dir("./mocktest-frontend/") {
                    withSonarQubeEnv(SONARQUBE_ENV) {
                        sh 'npx sonar-scanner' 
                    }
                }       
            }   
        }


        stage("Charts Clone") {
            steps {
                script {
                    sh "rm -rf ./charts"
                    sh "git clone https://github.com/Harsha190202/charts.git -b ${env.GitBranch}"
                }
            }
        }


        stage("Docker Build and Push") {
            steps {
                script {
                    sh "docker build -f charts/applications/mocktest-frontend/Dockerfile -t mocktest-frontend ."
                    sh "docker tag mocktest-frontend:latest ${dockerImage}"
                    sh "docker push ${dockerImage}"
                }
            }
        }


        stage("TRIVY Image Scan") {
            steps {
                sh "trivy image ${dockerImage} > trivyimage.txt" 
                sh "docker rmi ${dockerImage}"
            }
        }


        

        stage("Deployment") {
            steps {
                script {
                    withCredentials([string(credentialsId: 'github-pat', variable: 'GITHUB_TOKEN')]) {
                    sh """
                    cd charts

                    git remote set-url origin https://github.com/Harsha190202/charts.git
                    git checkout main 
                    git pull origin main
                    sed -i 's|image: .*|image: ${dockerImage}|g' applications/mocktest-frontend/deployment.yaml
                    git commit -am "Jenkins image update"
                    git pull origin main
                    git push https://${GITHUB_TOKEN}@github.com/Harsha190202/charts.git main

                    """
                    }
                }
            }
        }
        
    }
}
